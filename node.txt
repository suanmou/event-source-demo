<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>节点管理控制台 - Vue2 + ElementUI</title>
  <link rel="stylesheet" href="https://unpkg.com/element-ui/lib/theme-chalk/index.css">
  <script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js"></script>
  <script src="https://unpkg.com/element-ui/lib/index.js"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Segoe UI', 'PingFang SC', 'Microsoft YaHei', sans-serif;
      background-color: #f8fafc;
      color: #333;
      line-height: 1.6;
    }
    
    #app {
      max-width: 1400px;
      margin: 0 auto;
      padding: 20px;
    }
    
    .header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 15px 0;
      margin-bottom: 20px;
      border-bottom: 1px solid #e2e8f0;
    }
    
    .logo {
      display: flex;
      align-items: center;
      gap: 12px;
    }
    
    .logo-icon {
      background: linear-gradient(135deg, #3498db, #1e88e5);
      width: 40px;
      height: 40px;
      border-radius: 10px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-size: 20px;
    }
    
    .logo-text {
      font-size: 24px;
      font-weight: 600;
      color: #2d3748;
    }
    
    .header-info {
      display: flex;
      align-items: center;
      gap: 15px;
    }
    
    .node-selector {
      background: white;
      border-radius: 12px;
      padding: 25px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
      margin-bottom: 25px;
    }
    
    .selector-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }
    
    .section-title {
      font-size: 20px;
      font-weight: 600;
      color: #2d3748;
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .section-title i {
      color: #3498db;
    }
    
    .node-controls {
      display: flex;
      gap: 15px;
    }
    
    .node-selector-content {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 25px;
    }
    
    .node-dropdown {
      margin-bottom: 20px;
    }
    
    .node-info-card {
      background: #f9fafb;
      border-radius: 10px;
      padding: 20px;
      border-left: 4px solid #3498db;
    }
    
    .node-info-grid {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 15px;
      margin-top: 15px;
    }
    
    .info-item {
      display: flex;
      flex-direction: column;
    }
    
    .info-label {
      font-size: 14px;
      color: #718096;
      margin-bottom: 5px;
    }
    
    .info-value {
      font-size: 16px;
      font-weight: 500;
      color: #2d3748;
    }
    
    .status-indicator {
      display: flex;
      align-items: center;
      margin-top: 15px;
      padding-top: 15px;
      border-top: 1px solid #edf2f7;
    }
    
    .status-dot {
      width: 12px;
      height: 12px;
      border-radius: 50%;
      margin-right: 10px;
    }
    
    .online {
      background-color: #10b981;
    }
    
    .offline {
      background-color: #ef4444;
    }
    
    .connecting {
      background-color: #f59e0b;
      animation: pulse 1.5s infinite;
    }
    
    @keyframes pulse {
      0% { opacity: 0.6; }
      50% { opacity: 1; }
      100% { opacity: 0.6; }
    }
    
    .tab-container {
      background: white;
      border-radius: 12px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
      overflow: hidden;
    }
    
    .tabs-header {
      display: flex;
      background: #f8fafc;
      border-bottom: 1px solid #e2e8f0;
    }
    
    .tab {
      padding: 18px 30px;
      font-size: 17px;
      cursor: pointer;
      transition: all 0.3s;
      color: #718096;
      border-bottom: 3px solid transparent;
    }
    
    .tab.active {
      color: #3498db;
      border-bottom: 3px solid #3498db;
      background: rgba(52, 152, 219, 0.05);
      font-weight: 500;
    }
    
    .tab-content {
      padding: 30px;
    }
    
    .config-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: 25px;
    }
    
    .config-card {
      background: #f9fafb;
      border-radius: 10px;
      padding: 20px;
      border: 1px solid #edf2f7;
    }
    
    .config-title {
      font-size: 17px;
      color: #3498db;
      margin-bottom: 15px;
      display: flex;
      align-items: center;
      gap: 10px;
      font-weight: 500;
    }
    
    .config-item {
      margin-bottom: 15px;
    }
    
    .config-label {
      font-size: 14px;
      color: #718096;
      margin-bottom: 5px;
    }
    
    .config-value {
      font-size: 16px;
      color: #2d3748;
      padding: 8px 12px;
      background: white;
      border-radius: 8px;
      border: 1px solid #e2e8f0;
    }
    
    .console-container {
      background: #1e293b;
      border-radius: 8px;
      padding: 20px;
      color: #e2e8f0;
      font-family: 'Consolas', 'Courier New', monospace;
      height: 400px;
      overflow-y: auto;
      margin-bottom: 20px;
    }
    
    .console-message {
      margin-bottom: 10px;
      line-height: 1.6;
      word-wrap: break-word;
    }
    
    .console-input {
      display: flex;
      gap: 10px;
    }
    
    .console-input input {
      flex: 1;
      background: white;
      border: 1px solid #e2e8f0;
      padding: 14px 18px;
      border-radius: 8px;
      outline: none;
      font-family: 'Consolas', monospace;
      font-size: 15px;
      transition: border-color 0.3s;
    }
    
    .console-input input:focus {
      border-color: #3498db;
      box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.2);
    }
    
    .console-input button {
      background: #3498db;
      color: white;
      border: none;
      padding: 0 25px;
      border-radius: 8px;
      cursor: pointer;
      font-weight: 500;
      transition: background 0.3s;
    }
    
    .console-input button:hover {
      background: #1e88e5;
    }
    
    .action-buttons {
      display: flex;
      gap: 15px;
      margin-top: 20px;
    }
    
    .btn {
      padding: 12px 25px;
      border-radius: 8px;
      font-weight: 500;
      cursor: pointer;
      display: flex;
      align-items: center;
      gap: 8px;
      transition: all 0.3s;
      border: none;
      font-size: 15px;
    }
    
    .btn-primary {
      background: #3498db;
      color: white;
    }
    
    .btn-primary:hover {
      background: #1e88e5;
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(52, 152, 219, 0.3);
    }
    
    .btn-secondary {
      background: #f1f5f9;
      color: #4a5568;
    }
    
    .btn-secondary:hover {
      background: #e2e8f0;
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    }
    
    .message-sent {
      color: #4ec9b0;
    }
    
    .message-received {
      color: #dcdcaa;
    }
    
    .message-system {
      color: #3498db;
    }
    
    .timestamp {
      color: #94a3b8;
      margin-right: 10px;
    }
    
    .empty-state {
      text-align: center;
      padding: 50px 20px;
      color: #94a3b8;
    }
    
    .empty-state i {
      font-size: 60px;
      margin-bottom: 20px;
      color: #cbd5e1;
    }
    
    .empty-state p {
      font-size: 18px;
      margin-top: 15px;
      color: #64748b;
    }
    
    .footer {
      text-align: center;
      padding: 30px 0;
      color: #94a3b8;
      font-size: 14px;
      margin-top: 20px;
      border-top: 1px solid #e2e8f0;
    }
    
    .connection-status {
      display: flex;
      align-items: center;
      gap: 8px;
      font-weight: 500;
    }
    
    .status-badge {
      padding: 5px 12px;
      border-radius: 20px;
      font-size: 13px;
    }
    
    .status-connected {
      background: #dcfce7;
      color: #16a34a;
    }
    
    .status-disconnected {
      background: #fee2e2;
      color: #dc2626;
    }
    
    .status-connecting {
      background: #fef9c3;
      color: #ca8a04;
    }
    
    .stats-container {
      display: flex;
      gap: 20px;
      margin-top: 20px;
    }
    
    .stat-card {
      flex: 1;
      background: white;
      border-radius: 10px;
      padding: 20px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.03);
      border-top: 4px solid #3498db;
    }
    
    .stat-title {
      color: #64748b;
      font-size: 15px;
      margin-bottom: 10px;
    }
    
    .stat-value {
      font-size: 28px;
      font-weight: 600;
      color: #1e293b;
    }
    
    .stat-trend {
      display: flex;
      align-items: center;
      gap: 5px;
      margin-top: 5px;
      font-size: 14px;
      color: #10b981;
    }
    
    @media (max-width: 992px) {
      .node-selector-content {
        grid-template-columns: 1fr;
      }
      
      .config-grid {
        grid-template-columns: 1fr;
      }
    }
  </style>
</head>
<body>
  <div id="app">
    <div class="header">
      <div class="logo">
        <div class="logo-icon">
          <i class="fas fa-network-wired"></i>
        </div>
        <div class="logo-text">节点管理控制台</div>
      </div>
      <div class="header-info">
        <div class="connection-status">
          <span>状态：</span>
          <span class="status-badge" :class="statusBadgeClass">
            {{ statusText }}
          </span>
        </div>
        <el-tag type="success">已连接 {{ connectedNodes }} 个节点</el-tag>
        <el-tag type="info">版本 v2.1.0</el-tag>
      </div>
    </div>
    
    <div class="node-selector">
      <div class="selector-header">
        <div class="section-title">
          <i class="fas fa-server"></i>
          <span>节点管理</span>
        </div>
        <div class="node-controls">
          <el-button type="primary" icon="el-icon-refresh" @click="refreshNodes">刷新节点</el-button>
          <el-button icon="el-icon-plus" @click="addNode">添加节点</el-button>
        </div>
      </div>
      
      <div class="node-selector-content">
        <div>
          <div class="node-dropdown">
            <el-select 
              v-model="selectedNodeId" 
              placeholder="选择节点" 
              style="width:100%"
              size="medium"
              @change="selectNode"
            >
              <el-option
                v-for="node in nodes"
                :key="node.id"
                :label="node.name"
                :value="node.id"
              >
                <div style="display: flex; justify-content: space-between; align-items: center;">
                  <span>{{ node.name }}</span>
                  <span :style="{ color: node.status === 'online' ? '#10b981' : '#ef4444' }">
                    {{ node.status === 'online' ? '在线' : '离线' }}
                  </span>
                </div>
              </el-option>
            </el-select>
          </div>
          
          <div class="node-info-card" v-if="selectedNode">
            <div style="font-size:20px; margin-bottom:10px; color:#1e293b; font-weight:500">
              {{ selectedNode.name }}
              <span style="font-size:14px; color:#64748b">({{ selectedNode.id }})</span>
            </div>
            
            <div class="node-info-grid">
              <div class="info-item">
                <div class="info-label">节点类型</div>
                <div class="info-value">{{ selectedNode.type }}</div>
              </div>
              <div class="info-item">
                <div class="info-label">IP地址</div>
                <div class="info-value">{{ selectedNode.ip }}:{{ selectedNode.port }}</div>
              </div>
              <div class="info-item">
                <div class="info-label">协议版本</div>
                <div class="info-value">{{ selectedNode.protocol }}</div>
              </div>
              <div class="info-item">
                <div class="info-label">最后活跃</div>
                <div class="info-value">{{ selectedNode.lastActive }}</div>
              </div>
            </div>
            
            <div class="status-indicator">
              <div class="status-dot" :class="selectedNode.status"></div>
              <span v-if="selectedNode.status === 'online'">在线 - 可连接</span>
              <span v-else-if="selectedNode.status === 'offline'">离线 - 不可连接</span>
              <span v-else>连接中...</span>
            </div>
          </div>
          
          <div class="stats-container">
            <div class="stat-card">
              <div class="stat-title">CPU使用率</div>
              <div class="stat-value">{{ selectedNode ? selectedNode.cpu : '0%' }}</div>
              <div class="stat-trend">
                <i class="fas fa-arrow-down"></i> 较昨日下降2%
              </div>
            </div>
            <div class="stat-card">
              <div class="stat-title">内存使用</div>
              <div class="stat-value">{{ selectedNode ? selectedNode.memory : '0GB/0GB' }}</div>
              <div class="stat-trend">
                <i class="fas fa-arrow-up"></i> 较昨日上升5%
              </div>
            </div>
          </div>
        </div>
        
        <div class="action-buttons">
          <button 
            class="btn btn-primary"
            :disabled="!selectedNode || selectedNode.status === 'offline'"
            @click="toggleConnection"
          >
            <i class="fas fa-plug"></i>
            {{ isConnected ? '断开连接' : '连接节点' }}
          </button>
          <button class="btn btn-secondary" @click="showNodeDetails">
            <i class="fas fa-info-circle"></i>
            查看详情
          </button>
          <button class="btn btn-secondary" @click="editNodeConfig">
            <i class="fas fa-cog"></i>
            配置设置
          </button>
        </div>
      </div>
    </div>
    
    <div class="tab-container">
      <div class="tabs-header">
        <div 
          class="tab"
          :class="{ active: activeTab === 'config' }"
          @click="activeTab = 'config'"
        >
          <i class="fas fa-cogs"></i> 配置信息
        </div>
        <div 
          class="tab"
          :class="{ active: activeTab === 'console' }"
          @click="activeTab = 'console'"
        >
          <i class="fas fa-terminal"></i> 控制台
        </div>
        <div 
          class="tab"
          :class="{ active: activeTab === 'monitor' }"
          @click="activeTab = 'monitor'"
        >
          <i class="fas fa-chart-line"></i> 性能监控
        </div>
      </div>
      
      <div class="tab-content">
        <!-- 配置信息标签页 -->
        <div v-show="activeTab === 'config'">
          <div v-if="selectedNode">
            <div class="config-grid">
              <div class="config-card">
                <div class="config-title">
                  <i class="fas fa-microchip"></i>
                  <span>硬件信息</span>
                </div>
                <div class="config-item">
                  <div class="config-label">CPU使用率</div>
                  <div class="config-value">{{ selectedNode.cpu }}</div>
                </div>
                <div class="config-item">
                  <div class="config-label">内存使用</div>
                  <div class="config-value">{{ selectedNode.memory }}</div>
                </div>
                <div class="config-item">
                  <div class="config-label">存储空间</div>
                  <div class="config-value">{{ selectedNode.storage }}</div>
                </div>
                <div class="config-item">
                  <div class="config-label">网络带宽</div>
                  <div class="config-value">{{ selectedNode.bandwidth }}</div>
                </div>
              </div>
              
              <div class="config-card">
                <div class="config-title">
                  <i class="fas fa-desktop"></i>
                  <span>系统配置</span>
                </div>
                <div class="config-item">
                  <div class="config-label">操作系统</div>
                  <div class="config-value">{{ selectedNode.os }}</div>
                </div>
                <div class="config-item">
                  <div class="config-label">内核版本</div>
                  <div class="config-value">{{ selectedNode.kernel }}</div>
                </div>
                <div class="config-item">
                  <div class="config-label">启动时间</div>
                  <div class="config-value">{{ selectedNode.uptime }}</div>
                </div>
                <div class="config-item">
                  <div class="config-label">安全等级</div>
                  <div class="config-value">{{ selectedNode.security }}</div>
                </div>
              </div>
              
              <div class="config-card">
                <div class="config-title">
                  <i class="fas fa-network-wired"></i>
                  <span>网络配置</span>
                </div>
                <div class="config-item">
                  <div class="config-label">公共IP</div>
                  <div class="config-value">{{ selectedNode.publicIp }}</div>
                </div>
                <div class="config-item">
                  <div class="config-label">内部IP</div>
                  <div class="config-value">{{ selectedNode.internalIp }}</div>
                </div>
                <div class="config-item">
                  <div class="config-label">防火墙状态</div>
                  <div class="config-value">{{ selectedNode.firewall }}</div>
                </div>
                <div class="config-item">
                  <div class="config-label">开放端口</div>
                  <div class="config-value">{{ selectedNode.openPorts.join(', ') }}</div>
                </div>
              </div>
              
              <div class="config-card">
                <div class="config-title">
                  <i class="fas fa-server"></i>
                  <span>服务状态</span>
                </div>
                <div class="config-item">
                  <div class="config-label">Web服务</div>
                  <div class="config-value">{{ selectedNode.services.web }}</div>
                </div>
                <div class="config-item">
                  <div class="config-label">数据库</div>
                  <div class="config-value">{{ selectedNode.services.database }}</div>
                </div>
                <div class="config-item">
                  <div class="config-label">消息队列</div>
                  <div class="config-value">{{ selectedNode.services.mq }}</div>
                </div>
                <div class="config-item">
                  <div class="config-label">缓存服务</div>
                  <div class="config-value">{{ selectedNode.services.cache }}</div>
                </div>
              </div>
            </div>
          </div>
          <div v-else class="empty-state">
            <i class="fas fa-server"></i>
            <p>请选择一个节点查看配置信息</p>
          </div>
        </div>
        
        <!-- 控制台标签页 -->
        <div v-show="activeTab === 'console'">
          <div class="console-container" ref="console">
            <div v-for="(msg, index) in consoleMessages" :key="index" class="console-message">
              <span :class="'message-' + msg.type">
                <span class="timestamp">[{{ msg.timestamp }}]</span>
                {{ msg.content }}
              </span>
            </div>
            
            <div v-if="consoleMessages.length === 0" class="empty-state">
              <i class="fas fa-terminal"></i>
              <p>控制台已就绪，连接后可开始交互</p>
            </div>
          </div>
          
          <div class="console-input">
            <input 
              type="text" 
              v-model="command" 
              placeholder="输入命令并按回车发送..."
              :disabled="!isConnected"
              @keyup.enter="sendCommand"
            >
            <button @click="sendCommand" :disabled="!isConnected || !command.trim()">
              发送
            </button>
          </div>
          
          <div class="action-buttons">
            <button class="btn btn-secondary" @click="clearConsole">
              <i class="fas fa-trash-alt"></i>
              清空控制台
            </button>
            <button class="btn btn-secondary">
              <i class="fas fa-history"></i>
              查看历史命令
            </button>
          </div>
        </div>
        
        <!-- 性能监控标签页 -->
        <div v-show="activeTab === 'monitor'">
          <div v-if="selectedNode" style="text-align:center; padding:40px 20px">
            <i class="fas fa-chart-line" style="font-size:60px; color:#3498db; margin-bottom:20px"></i>
            <h3 style="color:#2d3748; margin-bottom:15px">{{ selectedNode.name }} 性能监控</h3>
            <p style="color:#64748b; max-width:600px; margin:0 auto">
              实时监控图表显示CPU、内存、网络和磁盘使用情况。该功能需要节点连接后启用。
              当前节点状态: <span :style="{color: selectedNode.status === 'online' ? '#10b981' : '#ef4444'}">{{ selectedNode.status === 'online' ? '在线' : '离线' }}</span>
            </p>
            <div style="margin-top:30px">
              <button class="btn btn-primary">
                <i class="fas fa-play-circle"></i>
                启动性能监控
              </button>
            </div>
          </div>
          <div v-else class="empty-state">
            <i class="fas fa-chart-bar"></i>
            <p>请选择一个节点查看性能监控</p>
          </div>
        </div>
      </div>
    </div>
    
    <div class="footer">
      <p>© 2023 节点管理系统 | 基于 Vue2 + ElementUI 构建 | 安全连接: WebSocket TLS 1.3</p>
      <p style="margin-top:10px">当前时间: 2023年6月9日 14:28:36</p>
    </div>
  </div>

  <script>
    new Vue({
      el: '#app',
      data() {
        return {
          nodes: [
            {
              id: 'node-001',
              name: '边缘计算节点-01',
              ip: '192.168.1.101',
              port: 8080,
              type: '边缘计算',
              cpu: '24.5%',
              memory: '1.8GB/4GB',
              storage: '32GB/128GB SSD',
              bandwidth: '100 Mbps',
              os: 'Ubuntu 22.04 LTS',
              kernel: '5.15.0-76-generic',
              uptime: '15天 8小时',
              security: '高级',
              publicIp: '203.0.113.45',
              internalIp: '10.0.1.101',
              firewall: '启用',
              openPorts: [22, 80, 443, 8080],
              services: {
                web: '运行中',
                database: '运行中',
                mq: '运行中',
                cache: '运行中'
              },
              lastActive: '5分钟前',
              status: 'online',
              protocol: 'v1.2'
            },
            {
              id: 'node-002',
              name: '数据中心节点-02',
              ip: '10.10.2.15',
              port: 8081,
              type: '数据中心',
              cpu: '62.3%',
              memory: '12.4GB/16GB',
              storage: '2TB/4TB HDD',
              bandwidth: '1 Gbps',
              os: 'CentOS 8',
              kernel: '4.18.0-425.3.1.el8',
              uptime: '42天 3小时',
              security: '企业级',
              publicIp: '198.51.100.22',
              internalIp: '10.0.2.15',
              firewall: '启用',
              openPorts: [22, 80, 443, 8081],
              services: {
                web: '运行中',
                database: '运行中',
                mq: '维护中',
                cache: '运行中'
              },
              lastActive: '2小时前',
              status: 'online',
              protocol: 'v1.1'
            },
            {
              id: 'node-003',
              name: '物联网网关节点',
              ip: '172.16.30.5',
              port: 8082,
              type: '物联网',
              cpu: '8.7%',
              memory: '512MB/1GB',
              storage: '8GB/32GB Flash',
              bandwidth: '50 Mbps',
              os: 'Raspberry Pi OS',
              kernel: '5.10.103-v7+',
              uptime: '7天 12小时',
              security: '基础',
              publicIp: 'N/A',
              internalIp: '172.16.30.5',
              firewall: '启用',
              openPorts: [22, 80, 8082],
              services: {
                web: '运行中',
                database: '未安装',
                mq: '运行中',
                cache: '未安装'
              },
              lastActive: '15分钟前',
              status: 'offline',
              protocol: 'v1.0'
            },
            {
              id: 'node-004',
              name: '云服务器节点-04',
              ip: '203.0.113.25',
              port: 8080,
              type: '云服务器',
              cpu: '45.1%',
              memory: '8.2GB/16GB',
              storage: '250GB/500GB SSD',
              bandwidth: '500 Mbps',
              os: 'Debian 11',
              kernel: '5.10.0-21-amd64',
              uptime: '30天 1小时',
              security: '高级',
              publicIp: '203.0.113.25',
              internalIp: '10.10.10.4',
              firewall: '启用',
              openPorts: [22, 80, 443, 8080],
              services: {
                web: '运行中',
                database: '运行中',
                mq: '运行中',
                cache: '运行中'
              },
              lastActive: '1分钟前',
              status: 'online',
              protocol: 'v1.3'
            }
          ],
          selectedNodeId: 'node-001',
          selectedNode: null,
          connecting: false,
          isConnected: false,
          command: '',
          consoleMessages: [],
          wsConnection: null,
          activeTab: 'config',
          connectedNodes: 3
        };
      },
      computed: {
        statusText() {
          if (!this.selectedNode) return '未选择节点';
          if (this.isConnected) return '已连接';
          if (this.connecting) return '连接中...';
          return this.selectedNode.status === 'online' ? '可连接' : '不可连接';
        },
        statusBadgeClass() {
          if (this.isConnected) return 'status-connected';
          if (this.connecting) return 'status-connecting';
          return this.selectedNode && this.selectedNode.status === 'online' 
            ? 'status-connected' 
            : 'status-disconnected';
        }
      },
      mounted() {
        this.selectedNode = this.nodes[0];
        this.addConsoleMessage('系统', '节点控制台已启动', 'system');
        this.addConsoleMessage('系统', '请选择一个节点并点击"连接节点"按钮', 'system');
      },
      methods: {
        selectNode(nodeId) {
          this.selectedNode = this.nodes.find(node => node.id === nodeId);
          this.consoleMessages = [];
          this.isConnected = false;
          
          // 添加系统消息
          this.addConsoleMessage('系统', `已选择节点: ${this.selectedNode.name}`, 'system');
          this.addConsoleMessage('系统', '点击"连接节点"按钮开始连接', 'system');
        },
        
        toggleConnection() {
          if (this.isConnected) {
            this.disconnect();
          } else {
            this.connectToNode();
          }
        },
        
        connectToNode() {
          if (!this.selectedNode) {
            this.$message.warning('请先选择一个节点');
            return;
          }
          
          if (this.selectedNode.status === 'offline') {
            this.$message.error('该节点当前处于离线状态，无法连接');
            return;
          }
          
          this.connecting = true;
          this.addConsoleMessage('系统', `正在连接节点 ${this.selectedNode.name}...`, 'system');
          
          // 模拟WebSocket连接过程
          setTimeout(() => {
            this.isConnected = true;
            this.connecting = false;
            
            // 添加连接成功的消息
            this.addConsoleMessage('系统', `成功连接到节点 ${this.selectedNode.name} (${this.selectedNode.ip}:${this.selectedNode.port})`, 'system');
            this.addConsoleMessage('系统', '连接协议: WebSocket v1.2', 'system');
            this.addConsoleMessage('系统', '输入 "help" 获取可用命令列表', 'system');
            
            // 模拟接收欢迎消息
            setTimeout(() => {
              this.addConsoleMessage('received', '欢迎使用节点控制台! 输入 "help" 查看可用命令。', 'received');
            }, 500);
          }, 1500);
        },
        
        disconnect() {
          this.isConnected = false;
          this.addConsoleMessage('系统', '已断开与节点的连接', 'system');
        },
        
        sendCommand() {
          if (!this.command.trim()) return;
          
          const cmd = this.command.trim();
          this.addConsoleMessage('sent', cmd, 'sent');
          
          // 模拟发送命令并接收响应
          setTimeout(() => {
            this.handleCommandResponse(cmd);
          }, 300);
          
          this.command = '';
        },
        
        handleCommandResponse(cmd) {
          const responses = {
            help: `可用命令:
  - status: 查看节点状态
  - info: 查看节点信息
  - restart: 重启节点服务
  - log: 查看最近日志
  - clear: 清空控制台
  - ping: 测试网络延迟
  - users: 显示在线用户`,
            status: `节点状态:
  名称: ${this.selectedNode.name}
  状态: 在线
  CPU使用率: ${this.selectedNode.cpu}
  内存使用: ${this.selectedNode.memory}
  连接数: 12`,
            info: `节点信息:
  ID: ${this.selectedNode.id}
  类型: ${this.selectedNode.type}
  IP地址: ${this.selectedNode.ip}
  端口: ${this.selectedNode.port}
  协议版本: ${this.selectedNode.protocol}`,
            restart: '节点服务正在重启...',
            ping: '来自 192.168.1.101 的回复: 时间=12ms',
            users: `当前在线用户:
  admin (192.168.1.5)
  user1 (10.0.2.8)
  monitor (172.16.30.22)`,
            log: `最近日志:
  [2023-06-09 10:23:12] 系统启动完成
  [2023-06-09 10:25:45] 处理请求: GET /api/status
  [2023-06-09 10:30:11] 新设备连接: Device-7A3B`
          };
          
          if (cmd === 'clear') {
            this.consoleMessages = [];
            return;
          }
          
          const response = responses[cmd] || `未知命令: ${cmd}。输入 "help" 获取帮助。`;
          if (response) {
            this.addConsoleMessage('received', response, 'received');
          }
        },
        
        addConsoleMessage(prefix, content, type) {
          const now = new Date();
          const timestamp = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}:${now.getSeconds().toString().padStart(2, '0')}`;
          
          this.consoleMessages.push({
            prefix,
            content,
            type,
            timestamp
          });
          
          // 滚动到底部
          this.$nextTick(() => {
            const consoleEl = this.$refs.console;
            if (consoleEl) {
              consoleEl.scrollTop = consoleEl.scrollHeight;
            }
          });
        },
        
        clearConsole() {
          this.consoleMessages = [];
        },
        
        refreshNodes() {
          this.$message.success('节点列表已刷新');
          // 模拟刷新节点数据
          this.nodes.forEach(node => {
            if (node.status === 'online') {
              // 更新一些动态数据
              const cpu = (Math.random() * 80).toFixed(1) + '%';
              const memoryUsage = Math.floor(Math.random() * 1000) + 500;
              node.cpu = cpu;
              node.memory = `${(memoryUsage / 1024).toFixed(1)}GB/${(Math.floor(Math.random() * 4) + 2)}GB`;
            }
          });
        },
        
        addNode() {
          this.$message.info('添加节点功能');
        },
        
        showNodeDetails() {
          if (!this.selectedNode) {
            this.$message.warning('请先选择一个节点');
            return;
          }
          this.activeTab = 'config';
        },
        
        editNodeConfig() {
          this.$message.info('编辑节点配置功能');
        }
      },
      watch: {
        consoleMessages() {
          // 确保控制台始终滚动到底部
          this.$nextTick(() => {
            const consoleEl = this.$refs.console;
            if (consoleEl) {
              consoleEl.scrollTop = consoleEl.scrollHeight;
            }
          });
        }
      }
    });
  </script>
</body>
</html>