[DEFAULT]
ConnectionType=initiator
ReconnectInterval=60
FileLogPath=logs/client
FileStorePath=store/client

[SESSION]
BeginString=FIX.4.4
SenderCompID=CLIENT123
TargetCompID=BLOOMBERG
SocketConnectHost=localhost
SocketConnectPort=9876
StartTime=00:00:00
EndTime=23:59:59
HeartBtInt=30
UseDataDictionary=Y
DataDictionary=spec/FIX44.xml

# TLS配置
SocketUseSSL=Y
SocketKeyStore=config/client_keystore.jks
SocketKeyStorePassword=changeit
SocketTrustStore=config/bloomberg_truststore.jks
SocketTrustStorePassword=changeit


public class BloombergClientApp implements Application {
    private SessionID sessionID;

    @Override
    public void onCreate(SessionID sessionId) {
        this.sessionID = sessionId;
        System.out.println("Session created: " + sessionId);
    }

    @Override
    public void onLogon(SessionID sessionId) {
        System.out.println("Logged on to Bloomberg");
        scheduleHeartbeat(sessionId);
    }

    private void scheduleHeartbeat(SessionID sessionId) {
        Session.lookupSession(sessionId).setTargetDefaultHeartBtInt(30);
        new Timer().scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                try {
                    Session.sendToTarget(new Heartbeat(), sessionID);
                } catch (SessionNotFound e) {
                    e.printStackTrace();
                }
            }
        }, 30_000, 30_000);
    }

    @Override
    public void onLogout(SessionID sessionId) {
        System.out.println("Session logged out");
    }

    @Override
    public void toAdmin(Message message, SessionID sessionId) {
        if (message.getHeader().getField(MsgType.FIELD).equals(MsgType.LOGON)) {
            try {
                // 添加自定义登录字段（如用户令牌）
                message.setField(new StringField(9999, "BLOOMBERG_USER_TOKEN"));
            } catch (FieldNotFound e) {
                e.printStackTrace();
            }
        }
    }

    @Override
    public void fromAdmin(Message message, SessionID sessionId)
            throws FieldNotFound, IncorrectDataFormat, IncorrectTagValue, RejectLogon {
        // 验证服务器证书
        SSLSupport sslSupport = Session.lookupSession(sessionId).getSSLSupport();
        if (sslSupport != null) {
            X509Certificate[] certs = (X509Certificate[]) sslSupport.getPeerCertificateChain();
            if (!validateBloombergCert(certs)) {
                throw new RejectLogon("Invalid Bloomberg certificate");
            }
        }
    }

    private boolean validateBloombergCert(X509Certificate[] certs) {
        // 实现Bloomberg根证书验证逻辑
        return certs != null && certs.length > 0 
               && "CN=Bloomberg CA".equals(certs[0].getSubjectX500Principal().getName());
    }

    // 其他方法实现（fromApp/toApp）...
}


public class ClientLauncher {
    public static void main(String[] args) throws Exception {
        SessionSettings settings = new SessionSettings(new FileInputStream("config/client.cfg"));
        Application app = new BloombergClientApp();
        MessageStoreFactory storeFactory = new FileStoreFactory(settings);
        LogFactory logFactory = new FileLogFactory(settings);
        MessageFactory messageFactory = new DefaultMessageFactory();

        Initiator initiator = new SocketInitiator(app, storeFactory, settings, logFactory, messageFactory);
        initiator.start();

        // 保持主线程运行
        synchronized (ClientLauncher.class) {
            ClientLauncher.class.wait();
        }
    }
}

[DEFAULT]
ConnectionType=acceptor
StoreMessages=Y
FileLogPath=logs/server
FileStorePath=store/server

[SESSION]
BeginString=FIX.4.4
SenderCompID=BLOOMBERG
TargetCompID=CLIENT123
SocketAcceptHost=0.0.0.0
SocketAcceptPort=9876
StartTime=00:00:00
EndTime=23:59:59
HeartBtInt=30
UseDataDictionary=Y
DataDictionary=spec/FIX44.xml

# TLS配置
SocketUseSSL=Y
SocketKeyStore=config/server_keystore.jks
SocketKeyStorePassword=changeit
SocketNeedClientAuth=Y
AllowedIPs=192.168.1.100,10.0.0.0/24,2001:db8::/32
public class IPValidator {
    private static final Logger log = LoggerFactory.getLogger(IPValidator.class);
    private final List<CIDR> allowedCIDRs = new ArrayList<>();

    public IPValidator(String allowedIPsConfig) {
        for (String entry : allowedIPsConfig.split(",")) {
            try {
                allowedCIDRs.add(new CIDR(entry.trim()));
            } catch (UnknownHostException e) {
                log.warn("Invalid CIDR entry: {}", entry, e);
            }
        }
    }

    public boolean isAllowed(InetAddress clientIP) {
        for (CIDR cidr : allowedCIDRs) {
            if (cidr.contains(clientIP)) {
                return true;
            }
        }
        return false;
    }

    static class CIDR {
        private final Network network;

        public CIDR(String cidr) throws UnknownHostException {
            String[] parts = cidr.split("/");
            if (parts.length != 2) {
                throw new IllegalArgumentException("Invalid CIDR format");
            }
            this.network = new Network(
                InetAddress.getByName(parts[0]),
                Integer.parseInt(parts[1])
            );
        }

        public boolean contains(InetAddress address) {
            return network.contains(address);
        }
    }
}


public class BloombergServerApp implements Application {
    private final Map<SessionID, Instant> sessionActivity = new ConcurrentHashMap<>();
    private final IPValidator ipValidator;


    @Override
    public void onCreate(SessionID sessionId) {
        InetAddress clientIP = ((InetSocketAddress) session.getSocketAddress()).getAddress();
        if (!ipValidator.isAllowed(clientIP)) {
        	session.disconnect("IP address not in whitelist");
            	System.out.println("Rejected connection from: " + clientIP);
            	return;
        }
 
        System.out.println("New session created: " + sessionId);
        sessionActivity.put(sessionId, Instant.now());
    }

    @Override
    public void onLogon(SessionID sessionId) {
        System.out.println("Client logged on: " + sessionId);
        scheduleSessionCheck(sessionId);
    }

    private void scheduleSessionCheck(SessionID sessionId) {
        new Timer().scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                if (Instant.now().isAfter(sessionActivity.get(sessionId).plusSeconds(180))) {
                    Session.lookupSession(sessionId).disconnect("Inactivity timeout");
                }
            }
        }, 30_000, 30_000);
    }

    @Override
    public void onLogout(SessionID sessionId) {
        System.out.println("Client logged out: " + sessionId);
        sessionActivity.remove(sessionId);
    }

    @Override
    public void toAdmin(Message message, SessionID sessionId) {
        // 验证客户端登录请求
        if (message.getHeader().getField(MsgType.FIELD).equals(MsgType.LOGON)) {
            try {
                String userToken = message.getHeader().getString(9999);
                if (!validateUserToken(userToken)) {
                    throw new RejectLogon("Invalid user token");
                }
            } catch (FieldNotFound e) {
                throw new RejectLogon("Missing user token");
            }
        }
    }

    private boolean validateUserToken(String token) {
        // 实现Bloomberg SSO集成验证
        return token != null && token.startsWith("BLOOMBERG_");
    }

    @Override
    public void fromAdmin(Message message, SessionID sessionId)
            throws FieldNotFound, IncorrectDataFormat, IncorrectTagValue, RejectLogon {
        // 记录客户端证书信息
   
        Session session = Session.lookupSession(sessionId);
        InetAddress clientIP = ((InetSocketAddress) session.getSocketAddress()).getAddress();
 
        if (!ipValidator.isAllowed(clientIP)) {
            throw new RejectLogon("IP address not authorized");
        }
        SSLSupport sslSupport = Session.lookupSession(sessionId).getSSLSupport();
        if (sslSupport != null) {
            X509Certificate[] certs = (X509Certificate[]) sslSupport.getPeerCertificateChain();
            if (certs == null || certs.length == 0) {
                throw new RejectLogon("No client certificate provided");
            }
        }
    }

    @Override
    public void toApp(Message message, SessionID sessionId) throws DoNotSend {
        // 记录出站消息时间
        sessionActivity.put(sessionId, Instant.now());
    }

    @Override
    public void fromApp(Message message, SessionID sessionId)
            throws FieldNotFound, IncorrectDataFormat, IncorrectTagValue, UnsupportedMessageType {
        // 记录入站消息时间并验证序列号
        sessionActivity.put(sessionId, Instant.now());
        validateSequenceNumber(message, sessionId);
    }

    private void validateSequenceNumber(Message message, SessionID sessionId) {
        try {
            long expected = Session.lookupSession(sessionId).getNextSenderMsgSeqNum();
            long actual = message.getHeader().getLong(MsgSeqNum.FIELD);
            if (actual != expected) {
                throw new InvalidMessage("Sequence number mismatch", 
                    SessionRejectReason.INVALID_MSG_SEQ_NUM);
            }
        } catch (FieldNotFound e) {
            throw new InvalidMessage("Missing MsgSeqNum", 
                SessionRejectReason.REQUIRED_TAG_MISSING);
        }
    }
}


public class ServerLauncher {
    public static void main(String[] args) throws Exception {
        SessionSettings settings = new SessionSettings(new FileInputStream("config/server.cfg"));
        Application app = new BloombergServerApp();
        MessageStoreFactory storeFactory = new FileStoreFactory(settings);
        LogFactory logFactory = new FileLogFactory(settings);
        MessageFactory messageFactory = new DefaultMessageFactory();

        Acceptor acceptor = new SocketAcceptor(app, storeFactory, settings, logFactory, messageFactory);
        acceptor.start();

        // 保持主线程运行
        synchronized (ServerLauncher.class) {
            ServerLauncher.class.wait();
        }
    }
}

# 生成Bloomberg CA证书
keytool -genkeypair -alias bloomberg_ca -keyalg RSA -keystore bloomberg_ca.jks

# 生成服务端证书并由CA签名
keytool -genkeypair -alias server -keyalg RSA -keystore server_keystore.jks
keytool -certreq -alias server -file server.csr -keystore server_keystore.jks
keytool -gencert -alias bloomberg_ca -infile server.csr -outfile server.crt -keystore bloomberg_ca.jks
keytool -importcert -alias server_cert -file server.crt -keystore server_keystore.jks

# 生成客户端证书（相同流程）



import java.util.Set;
import java.util.HashSet;

public class IpWhitelistValidator {
    private final Set<String> allowedIps = new HashSet<>();

    public IpWhitelistValidator(String... ips) {
        for (String ip : ips) {
            allowedIps.add(ip);
        }
    }
    
    public void addAllowedIp(String ip) {
        allowedIps.add(ip);
    }
    
    public boolean isIpAllowed(String ip) {
        return allowedIps.contains(ip);
    }
    
    public void validateIp(String ip) throws RejectLogon {
        if (!isIpAllowed(ip)) {
            throw new RejectLogon("IP " + ip + " not in whitelist");
        }
    }
}


import org.apache.mina.core.filterchain.IoFilterAdapter;
import org.apache.mina.core.session.IoSession;
import java.net.InetSocketAddress;

public class IpCaptureFilter extends IoFilterAdapter {
    
    @Override
    public void sessionCreated(NextFilter nextFilter, IoSession session) {
        InetSocketAddress remoteAddress = (InetSocketAddress) session.getRemoteAddress();
        String clientIp = remoteAddress.getAddress().getHostAddress();
        
        // 存储到 session 属性
        session.setAttribute("CLIENT_IP", clientIp);
        System.out.println("Captured IP: " + clientIp);
        
        nextFilter.sessionCreated(session);
    }
}


import quickfix.*;
import org.apache.mina.core.filterchain.IoFilterChainBuilder;
import org.apache.mina.core.filterchain.DefaultIoFilterChainBuilder;

public class SecureAcceptor extends ThreadedSocketAcceptor {

    private final IpWhitelistValidator ipValidator;

    public SecureAcceptor(Application application, 
                         MessageStoreFactory storeFactory,
                         SessionSettings settings, 
                         LogFactory logFactory,
                         MessageFactory messageFactory,
                         IpWhitelistValidator ipValidator) throws ConfigError {
        super(application, storeFactory, settings, logFactory, messageFactory);
        this.ipValidator = ipValidator;
    }

    @Override
    protected IoFilterChainBuilder createIoFilterChainBuilder() {
        DefaultIoFilterChainBuilder chainBuilder = new DefaultIoFilterChainBuilder();
        chainBuilder.addLast("ipCapture", new IpCaptureFilter());
        return chainBuilder;
    }
    
    public IpWhitelistValidator getIpValidator() {
        return ipValidator;
    }
}

import quickfix.*;
import quickfix.field.MsgType;
import org.apache.mina.core.session.IoSession;

public class SecureFixApplication implements Application {
    
    private final SecureAcceptor acceptor;
    
    public SecureFixApplication(SecureAcceptor acceptor) {
        this.acceptor = acceptor;
    }

    @Override
    public void fromAdmin(Message message, SessionID sessionId) 
            throws FieldNotFound, IncorrectDataFormat, IncorrectTagValue, RejectLogon {
        
        // 仅在登录消息时验证
        if (MsgType.LOGON.equals(message.getHeader().getString(MsgType.FIELD))) {
            try {
                Session session = Session.lookupSession(sessionId);
                IoSession minaSession = getMinaSession(session);
                String clientIp = (String) minaSession.getAttribute("CLIENT_IP");
                
                // 进行白名单验证
                acceptor.getIpValidator().validateIp(clientIp);
                System.out.println("IP " + clientIp + " passed whitelist check");
                
            } catch (Exception e) {
                throw new RejectLogon("IP validation failed: " + e.getMessage());
            }
        }
    }
    
    private IoSession getMinaSession(Session session) throws Exception {
        Field ioSessionField = Session.class.getDeclaredField("ioSession");
        ioSessionField.setAccessible(true);
        return (IoSession) ioSessionField.get(session);
    }

    // 其他方法实现
    @Override public void onCreate(SessionID sessionId) {}
    @Override public void onLogon(SessionID sessionId) {}
    @Override public void onLogout(SessionID sessionId) {}
    @Override public void toAdmin(Message message, SessionID sessionId) {}
    @Override public void fromApp(Message message, SessionID sessionId) {}
    @Override public void toApp(Message message, SessionID sessionId) {}
}


import quickfix.*;

public class FixServer {
    public static void main(String[] args) throws ConfigError {
        // 创建 IP 白名单验证器
        IpWhitelistValidator ipValidator = new IpWhitelistValidator(
            "192.168.1.100",
            "10.0.0.5",
            "172.16.0.0/16"  // 支持 CIDR 格式
        );
        
        // 创建自定义 Acceptor
        SessionSettings settings = new SessionSettings("acceptor.cfg");
        MessageStoreFactory storeFactory = new FileStoreFactory(settings);
        LogFactory logFactory = new FileLogFactory(settings);
        MessageFactory msgFactory = new DefaultMessageFactory();
        
        SecureAcceptor acceptor = new SecureAcceptor(
            null, // Application 稍后注入
            storeFactory,
            settings,
            logFactory,
            msgFactory,
            ipValidator
        );
        
        // 创建 Application 并注入 Acceptor
        SecureFixApplication app = new SecureFixApplication(acceptor);
        acceptor.setApplication(app);
        
        // 启动服务
        acceptor.start();
        System.out.println("FIX Acceptor started with IP whitelisting");
        
        // 添加运行时动态更新白名单
        Runtime.getRuntime().addShutdownHook(new Thread(acceptor::stop));
    }
}

import java.util.*;
import java.net.InetAddress;
import java.net.UnknownHostException;

public class EnhancedIpValidator {
    private final Set<String> allowedSingleIps = new HashSet<>();
    private final List<CIDRRange> allowedCidrs = new ArrayList<>();

    public void addAllowedIp(String ipOrCidr) {
        if (ipOrCidr.contains("/")) {
            allowedCidrs.add(new CIDRRange(ipOrCidr));
        } else {
            allowedSingleIps.add(ipOrCidr);
        }
    }

    public boolean isIpAllowed(String ip) {
        // 检查单个IP
        if (allowedSingleIps.contains(ip)) {
            return true;
        }
        
        // 检查CIDR网段
        for (CIDRRange cidr : allowedCidrs) {
            if (cidr.contains(ip)) {
                return true;
            }
        }
        
        return false;
    }

    private static class CIDRRange {
        private final byte[] network;
        private final byte[] netmask;
        
        public CIDRRange(String cidr) {
            try {
                String[] parts = cidr.split("/");
                int prefix = Integer.parseInt(parts[1]);
                InetAddress networkAddr = InetAddress.getByName(parts[0]);
                
                this.network = networkAddr.getAddress();
                this.netmask = createNetmask(prefix, network.length);
                
            } catch (Exception e) {
                throw new IllegalArgumentException("Invalid CIDR: " + cidr);
            }
        }
        
        public boolean contains(String ip) {
            try {
                byte[] addr = InetAddress.getByName(ip).getAddress();
                if (addr.length != network.length) return false;
                
                for (int i = 0; i < addr.length; i++) {
                    if ((addr[i] & netmask[i]) != (network[i] & netmask[i])) {
                        return false;
                    }
                }
                return true;
            } catch (UnknownHostException e) {
                return false;
            }
        }
        
        private byte[] createNetmask(int prefix, int bytes) {
            byte[] mask = new byte[bytes];
            for (int i = 0; i < bytes; i++) {
                int bits = Math.min(8, Math.max(0, prefix - i * 8));
                mask[i] = (byte) (0xFF << (8 - bits));
            }
            return mask;
        }
    }
}

// 在过滤器中检查代理头
String realIp = session.getHeader("X-Forwarded-For");
if (realIp != null) {
    clientIp = realIp.split(",")[0].trim();
}


import org.apache.mina.core.filterchain.IoFilterAdapter;
import org.apache.mina.core.session.IoSession;
import java.net.InetSocketAddress;

public class IpCaptureFilter extends IoFilterAdapter {
    
    @Override
    public void sessionCreated(NextFilter nextFilter, IoSession session) {
        InetSocketAddress remoteAddress = (InetSocketAddress) session.getRemoteAddress();
        String clientIp = remoteAddress.getAddress().getHostAddress();
        
        // 存储 IP 并处理代理情况
        String realIp = getRealIp(session, clientIp);
        session.setAttribute("CLIENT_IP", realIp);
        
        nextFilter.sessionCreated(session);
    }
    
    private String getRealIp(IoSession session, String defaultIp) {
        // 检查代理头（如 X-Forwarded-For）
        Object xffHeader = session.getAttribute("X-Forwarded-For");
        if (xffHeader != null && xffHeader instanceof String) {
            String xff = (String) xffHeader;
            return xff.split(",")[0].trim(); // 取第一个地址
        }
        return defaultIp;
    }
}


import quickfix.*;
import org.apache.mina.core.filterchain.IoFilterChainBuilder;
import org.apache.mina.core.filterchain.DefaultIoFilterChainBuilder;

public class SecureAcceptor extends SocketAcceptor {

    private final IpWhitelistValidator ipValidator;
    private final IoFilterChainBuilder filterChainBuilder;

    public SecureAcceptor(Application application, 
                         MessageStoreFactory storeFactory,
                         SessionSettings settings, 
                         LogFactory logFactory,
                         MessageFactory messageFactory,
                         IpWhitelistValidator ipValidator) throws ConfigError {
        super(application, storeFactory, settings, logFactory, messageFactory);
        this.ipValidator = ipValidator;
        
        // 创建过滤器链
        this.filterChainBuilder = createFilterChainBuilder();
    }

    private IoFilterChainBuilder createFilterChainBuilder() {
        DefaultIoFilterChainBuilder chainBuilder = new DefaultIoFilterChainBuilder();
        chainBuilder.addLast("ipCapture", new IpCaptureFilter());
        return chainBuilder;
    }

    @Override
    protected IoFilterChainBuilder getFilterChainBuilder() {
        return filterChainBuilder;
    }
    
    public IpWhitelistValidator getIpValidator() {
        return ipValidator;
    }
}


import quickfix.*;
import quickfix.field.MsgType;
import org.apache.mina.core.session.IoSession;
import java.lang.reflect.Field;

public class SecureFixApplication implements Application {
    
    private final SecureAcceptor acceptor;
    
    public SecureFixApplication(SecureAcceptor acceptor) {
        this.acceptor = acceptor;
    }

    @Override
    public void fromAdmin(Message message, SessionID sessionId) 
            throws FieldNotFound, IncorrectDataFormat, IncorrectTagValue, RejectLogon {
        
        if (MsgType.LOGON.equals(message.getHeader().getString(MsgType.FIELD))) {
            try {
                String clientIp = getClientIp(sessionId);
                acceptor.getIpValidator().validateIp(clientIp);
                System.out.println("IP " + clientIp + " passed whitelist check");
            } catch (Exception e) {
                throw new RejectLogon("IP validation failed: " + e.getMessage());
            }
        }
    }
    
    private String getClientIp(SessionID sessionId) throws Exception {
        Session session = Session.lookupSession(sessionId);
        IoSession minaSession = getMinaSession(session);
        return (String) minaSession.getAttribute("CLIENT_IP");
    }
    
    private IoSession getMinaSession(Session session) throws Exception {
        // 兼容不同版本的反射获取
        try {
            // 尝试 QuickFIX/J 2.x 的方式
            Field socketField = session.getClass().getDeclaredField("socket");
            socketField.setAccessible(true);
            Object socketWrapper = socketField.get(session);
            
            Field minaSessionField = socketWrapper.getClass().getDeclaredField("minaSession");
            minaSessionField.setAccessible(true);
            return (IoSession) minaSessionField.get(socketWrapper);
            
        } catch (NoSuchFieldException e) {
            // 回退到 QuickFIX/J 1.x 的方式
            Field ioSessionField = Session.class.getDeclaredField("ioSession");
            ioSessionField.setAccessible(true);
            return (IoSession) ioSessionField.get(session);
        }
    }

    // 其他方法实现...
}

import quickfix.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FixServer {
    private static final Logger logger = LoggerFactory.getLogger(FixServer.class);
    
    public static void main(String[] args) {
        try {
            // 检查 QuickFIX/J 版本
            String version = quickfix.System.getVersion();
            logger.info("Starting FIX Server with QuickFIX/J version: {}", version);
            
            // 创建 IP 白名单验证器
            IpWhitelistValidator ipValidator = new IpWhitelistValidator(
                "192.168.1.100", "10.0.0.5", "172.16.0.0/16"
            );
            
            // 配置设置
            SessionSettings settings = new SessionSettings("acceptor.cfg");
            MessageStoreFactory storeFactory = new FileStoreFactory(settings);
            LogFactory logFactory = new SLF4JLogFactory(settings); // 推荐使用 SLF4J
            MessageFactory msgFactory = new DefaultMessageFactory();
            
            // 创建自定义 Acceptor
            SecureAcceptor acceptor = new SecureAcceptor(
                null, // Application 稍后注入
                storeFactory,
                settings,
                logFactory,
                msgFactory,
                ipValidator
            );
            
            // 创建 Application 并注入
            SecureFixApplication app = new SecureFixApplication(acceptor);
            acceptor.setApplication(app);
            
            // 启动服务
            acceptor.start();
            logger.info("FIX Acceptor started with IP whitelisting");
            
            // 添加关闭钩子
            Runtime.getRuntime().addShutdownHook(new Thread(() -> {
                logger.info("Stopping FIX Acceptor...");
                acceptor.stop();
            }));
            
        } catch (Exception e) {
            logger.error("Failed to start FIX server", e);
            System.exit(1);
        }
    }
}


import org.apache.mina.core.filterchain.IoFilterAdapter;
import org.apache.mina.core.session.IoSession;
import java.net.InetSocketAddress;
import quickfix.Session;

public class IpCaptureFilter extends IoFilterAdapter {
    
    @Override
    public void sessionCreated(NextFilter nextFilter, IoSession session) {
        try {
            InetSocketAddress remoteAddress = (InetSocketAddress) session.getRemoteAddress();
            String clientIp = remoteAddress.getAddress().getHostAddress();
            
            // 处理代理情况（如 X-Forwarded-For）
            String realIp = extractRealIp(session, clientIp);
            
            // 将 IP 存储在 MINA 会话中
            session.setAttribute("CLIENT_IP", realIp);
            
            // 如果 QuickFIX Session 已创建，立即设置属性
            setIpToQuickFixSession(session, realIp);
            
            System.out.println("Captured IP: " + realIp);
            
        } catch (Exception e) {
            System.err.println("Error capturing IP: " + e.getMessage());
        } finally {
            nextFilter.sessionCreated(session);
        }
    }
    
    private String extractRealIp(IoSession session, String defaultIp) {
        // 检查代理头
        Object xffHeader = session.getAttribute("X-Forwarded-For");
        if (xffHeader != null && xffHeader instanceof String) {
            String xff = (String) xffHeader;
            return xff.split(",")[0].trim();
        }
        return defaultIp;
    }
    
    private void setIpToQuickFixSession(IoSession minaSession, String ip) {
        // 尝试获取关联的 QuickFIX Session
        Object qfSessionObj = minaSession.getAttribute("QF_SESSION");
        if (qfSessionObj instanceof Session) {
            Session session = (Session) qfSessionObj;
            session.setProperty("CLIENT_IP", ip);
        }
    }
}

import java.util.*;
import java.net.InetAddress;
import java.net.UnknownHostException;
import quickfix.Session;
import quickfix.RejectLogon;

public class IpWhitelistValidator {
    private final Set<String> allowedSingleIps = new HashSet<>();
    private final List<CIDRRange> allowedCidrs = new ArrayList<>();
    
    private static final Logger logger = LoggerFactory.getLogger(IpWhitelistValidator.class);

    public IpWhitelistValidator(String... ips) {
        for (String ip : ips) {
            addAllowedIp(ip);
        }
    }
    
    public void addAllowedIp(String ipOrCidr) {
        if (ipOrCidr == null || ipOrCidr.isEmpty()) return;
        
        if (ipOrCidr.contains("/")) {
            try {
                allowedCidrs.add(new CIDRRange(ipOrCidr));
                logger.info("Added CIDR to whitelist: {}", ipOrCidr);
            } catch (IllegalArgumentException e) {
                logger.warn("Invalid CIDR format: {}", ipOrCidr);
            }
        } else {
            allowedSingleIps.add(ipOrCidr);
            logger.info("Added IP to whitelist: {}", ipOrCidr);
        }
    }
    
    public boolean isIpAllowed(String ip) {
        if (ip == null || ip.isEmpty()) {
            return false;
        }
        
        // 检查单个IP
        if (allowedSingleIps.contains(ip)) {
            return true;
        }
        
        // 检查CIDR网段
        for (CIDRRange cidr : allowedCidrs) {
            if (cidr.contains(ip)) {
                return true;
            }
        }
        
        return false;
    }
    
    public void validateIp(Session session) throws RejectLogon {
        String clientIp = getClientIpFromSession(session);
        if (clientIp == null) {
            logger.warn("Client IP not available for session: {}", session.getSessionID());
            throw new RejectLogon("Client IP not available");
        }
        
        if (!isIpAllowed(clientIp)) {
            logger.warn("Rejected login from IP: {} (Session: {})", clientIp, session.getSessionID());
            throw new RejectLogon("IP " + clientIp + " not in whitelist");
        }
        
        logger.info("Allowed login from IP: {} (Session: {})", clientIp, session.getSessionID());
    }
    
    public static String getClientIpFromSession(Session session) {
        return session.getProperty("CLIENT_IP");
    }
    
    // CIDR 范围处理类
    private static class CIDRRange {
        private final byte[] network;
        private final byte[] netmask;
        
        public CIDRRange(String cidr) {
            try {
                String[] parts = cidr.split("/");
                int prefix = Integer.parseInt(parts[1]);
                InetAddress networkAddr = InetAddress.getByName(parts[0]);
                
                this.network = networkAddr.getAddress();
                this.netmask = createNetmask(prefix, network.length);
                
            } catch (Exception e) {
                throw new IllegalArgumentException("Invalid CIDR: " + cidr);
            }
        }
        
        public boolean contains(String ip) {
            try {
                byte[] addr = InetAddress.getByName(ip).getAddress();
                if (addr.length != network.length) return false;
                
                for (int i = 0; i < addr.length; i++) {
                    if ((addr[i] & netmask[i]) != (network[i] & netmask[i])) {
                        return false;
                    }
                }
                return true;
            } catch (UnknownHostException e) {
                return false;
            }
        }
        
        private byte[] createNetmask(int prefix, int bytes) {
            byte[] mask = new byte[bytes];
            for (int i = 0; i < bytes; i++) {
                int bits = Math.min(8, Math.max(0, prefix - i * 8));
                mask[i] = (byte) (0xFF << (8 - bits));
            }
            return mask;
        }
    }
}


import quickfix.*;
import org.apache.mina.core.filterchain.IoFilterChainBuilder;
import org.apache.mina.core.filterchain.DefaultIoFilterChainBuilder;

public class SecureAcceptor extends SocketAcceptor {

    private final IpWhitelistValidator ipValidator;
    private final IoFilterChainBuilder filterChainBuilder;

    public SecureAcceptor(Application application, 
                         MessageStoreFactory storeFactory,
                         SessionSettings settings, 
                         LogFactory logFactory,
                         MessageFactory messageFactory,
                         IpWhitelistValidator ipValidator) throws ConfigError {
        super(application, storeFactory, settings, logFactory, messageFactory);
        this.ipValidator = ipValidator;
        this.filterChainBuilder = createFilterChainBuilder();
    }

    private IoFilterChainBuilder createFilterChainBuilder() {
        DefaultIoFilterChainBuilder chainBuilder = new DefaultIoFilterChainBuilder();
        chainBuilder.addLast("ipCapture", new IpCaptureFilter());
        return chainBuilder;
    }

    @Override
    protected IoFilterChainBuilder getFilterChainBuilder() {
        return filterChainBuilder;
    }
    
    public IpWhitelistValidator getIpValidator() {
        return ipValidator;
    }
}

import quickfix.*;
import quickfix.field.MsgType;

public class SecureFixApplication implements Application {
    
    private static final Logger logger = LoggerFactory.getLogger(SecureFixApplication.class);
    private final SecureAcceptor acceptor;
    
    public SecureFixApplication(SecureAcceptor acceptor) {
        this.acceptor = acceptor;
    }

    @Override
    public void onCreate(SessionID sessionId) {
        logger.info("Session created: {}", sessionId);
        // 确保 IP 属性已设置
        ensureIpPropertySet(sessionId);
    }
    
    private void ensureIpPropertySet(SessionID sessionId) {
        try {
            Session session = Session.lookupSession(sessionId);
            String clientIp = IpWhitelistValidator.getClientIpFromSession(session);
            
            if (clientIp == null) {
                logger.warn("IP not set for session: {}", sessionId);
                // 尝试延迟设置（如果 MINA 会话已存在）
                setDelayedIpProperty(session);
            }
        } catch (SessionNotFound e) {
            logger.error("Session not found: {}", sessionId, e);
        }
    }
    
    private void setDelayedIpProperty(Session session) {
        // 在 MINA 会话中查找 IP 并设置到 Session 属性
        try {
            // 获取 MINA 会话（兼容不同版本）
            Object minaSession = getMinaSession(session);
            if (minaSession instanceof IoSession) {
                String clientIp = (String) ((IoSession) minaSession).getAttribute("CLIENT_IP");
                if (clientIp != null) {
                    session.setProperty("CLIENT_IP", clientIp);
                    logger.info("Set delayed IP property: {} for session: {}", 
                                clientIp, session.getSessionID());
                }
            }
        } catch (Exception e) {
            logger.error("Failed to set delayed IP property", e);
        }
    }

    @Override
    public void fromAdmin(Message message, SessionID sessionId) 
            throws FieldNotFound, IncorrectDataFormat, IncorrectTagValue, RejectLogon {
        
        // 仅在登录消息时验证
        if (MsgType.LOGON.equals(message.getHeader().getString(MsgType.FIELD))) {
            try {
                Session session = Session.lookupSession(sessionId);
                
                // 进行白名单验证
                acceptor.getIpValidator().validateIp(session);
                
            } catch (SessionNotFound e) {
                logger.error("Session not found during logon: {}", sessionId, e);
                throw new RejectLogon("Session not found");
            }
        }
    }
    
    // 兼容性方法获取 MINA 会话（仅用于延迟设置）
    private Object getMinaSession(Session session) throws Exception {
        try {
            // 尝试 QuickFIX/J 2.x 的方式
            Field socketField = session.getClass().getDeclaredField("socket");
            socketField.setAccessible(true);
            Object socketWrapper = socketField.get(session);
            
            Field minaSessionField = socketWrapper.getClass().getDeclaredField("minaSession");
            minaSessionField.setAccessible(true);
            return minaSessionField.get(socketWrapper);
            
        } catch (NoSuchFieldException e) {
            // 回退到 QuickFIX/J 1.x 的方式
            Field ioSessionField = Session.class.getDeclaredField("ioSession");
            ioSessionField.setAccessible(true);
            return ioSessionField.get(session);
        }
    }

    // 其他必要回调方法
    @Override public void onLogon(SessionID sessionId) {
        logger.info("User logged on: {}", sessionId);
    }
    
    @Override public void onLogout(SessionID sessionId) {
        logger.info("User logged out: {}", sessionId);
    }
    
    @Override public void toAdmin(Message message, SessionID sessionId) {}
    @Override public void fromApp(Message message, SessionID sessionId) {}
    @Override public void toApp(Message message, SessionID sessionId) {}
}